import { Flashcard } from '../services/ai-service';

// Export flashcards as CSV
export function exportFlashcardsAsCSV(flashcards: Flashcard[], topic: string) {
  const headers = ['Question', 'Answer', 'Hint'];
  const rows = flashcards.map(card => [
    `"${card.question.replace(/"/g, '""')}"`,
    `"${card.answer.replace(/"/g, '""')}"`,
    `"${(card.hint || '').replace(/"/g, '""')}"`
  ]);
  
  const csv = [headers.join(','), ...rows.map(row => row.join(','))].join('\n');
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `flashcards-${topic}-${Date.now()}.csv`;
  link.click();
  URL.revokeObjectURL(link.href);
}

// Export flashcards as PDF (using basic HTML to PDF technique)
export function exportFlashcardsAsPDF(flashcards: Flashcard[], topic: string) {
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to export as PDF');
    return;
  }

  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Flashcards - ${topic}</title>
      <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        h1 { color: #2563eb; border-bottom: 3px solid #7c3aed; padding-bottom: 10px; }
        .card { page-break-inside: avoid; margin: 20px 0; padding: 20px; border: 2px solid #e5e7eb; border-radius: 8px; }
        .question { font-weight: bold; color: #1f2937; margin-bottom: 10px; font-size: 18px; }
        .answer { color: #4b5563; margin-bottom: 8px; line-height: 1.6; }
        .hint { color: #6b7280; font-style: italic; font-size: 14px; }
        .meta { text-align: center; color: #9ca3af; font-size: 12px; margin-top: 40px; }
        @media print {
          .card { page-break-inside: avoid; }
        }
      </style>
    </head>
    <body>
      <h1>ðŸ“š Flashcards: ${topic}</h1>
      <p style="color: #6b7280; margin-bottom: 30px;">Generated by AI Study Buddy</p>
      ${flashcards.map((card, i) => `
        <div class="card">
          <div class="question">Q${i + 1}: ${card.question}</div>
          <div class="answer"><strong>Answer:</strong> ${card.answer}</div>
          ${card.hint ? `<div class="hint">ðŸ’¡ Hint: ${card.hint}</div>` : ''}
        </div>
      `).join('')}
      <div class="meta">
        Created on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}<br>
        Powered by AI Study Buddy with Groq AI
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(html);
  printWindow.document.close();
  
  setTimeout(() => {
    printWindow.print();
  }, 500);
}

// Export flashcards as images (one card per image)
export async function exportFlashcardsAsImages(flashcards: Flashcard[], topic: string) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  if (!ctx) return;

  canvas.width = 800;
  canvas.height = 500;

  for (let i = 0; i < flashcards.length; i++) {
    const card = flashcards[i];
    
    // Clear canvas
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw border
    ctx.strokeStyle = '#2563eb';
    ctx.lineWidth = 4;
    ctx.strokeRect(10, 10, canvas.width - 20, canvas.height - 20);

    // Draw gradient background
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#eff6ff');
    gradient.addColorStop(1, '#faf5ff');
    ctx.fillStyle = gradient;
    ctx.fillRect(15, 15, canvas.width - 30, canvas.height - 30);

    // Draw header
    ctx.fillStyle = '#2563eb';
    ctx.font = 'bold 24px Arial';
    ctx.fillText(`Flashcard ${i + 1} of ${flashcards.length}`, 40, 60);

    // Draw question
    ctx.fillStyle = '#1f2937';
    ctx.font = 'bold 28px Arial';
    wrapText(ctx, `Q: ${card.question}`, 40, 120, canvas.width - 80, 36);

    // Draw answer
    ctx.fillStyle = '#4b5563';
    ctx.font = '22px Arial';
    wrapText(ctx, `A: ${card.answer}`, 40, 240, canvas.width - 80, 32);

    // Draw hint if exists
    if (card.hint) {
      ctx.fillStyle = '#6b7280';
      ctx.font = 'italic 18px Arial';
      wrapText(ctx, `ðŸ’¡ ${card.hint}`, 40, 380, canvas.width - 80, 28);
    }

    // Draw footer
    ctx.fillStyle = '#9ca3af';
    ctx.font = '14px Arial';
    ctx.fillText('AI Study Buddy - Powered by Groq AI', 40, canvas.height - 30);

    // Download image
    const link = document.createElement('a');
    link.download = `flashcard-${topic}-${i + 1}.png`;
    link.href = canvas.toDataURL('image/png');
    link.click();
    
    // Small delay between downloads
    await new Promise(resolve => setTimeout(resolve, 200));
  }
}

// Helper function to wrap text on canvas
function wrapText(ctx: CanvasRenderingContext2D, text: string, x: number, y: number, maxWidth: number, lineHeight: number) {
  const words = text.split(' ');
  let line = '';
  let currentY = y;

  for (let n = 0; n < words.length; n++) {
    const testLine = line + words[n] + ' ';
    const metrics = ctx.measureText(testLine);
    const testWidth = metrics.width;
    
    if (testWidth > maxWidth && n > 0) {
      ctx.fillText(line, x, currentY);
      line = words[n] + ' ';
      currentY += lineHeight;
    } else {
      line = testLine;
    }
  }
  ctx.fillText(line, x, currentY);
}

// Export text as .txt file
export function exportTextAsFile(text: string, filename: string) {
  const blob = new Blob([text], { type: 'text/plain;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `${filename}.txt`;
  link.click();
  URL.revokeObjectURL(link.href);
}

// Export analysis as HTML report
export function exportAnalysisAsReport(analysis: string, imageUrl?: string) {
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Image Analysis Report</title>
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; line-height: 1.6; }
        h1 { color: #2563eb; border-bottom: 3px solid #7c3aed; padding-bottom: 10px; }
        .image-container { text-align: center; margin: 20px 0; }
        img { max-width: 100%; border: 2px solid #e5e7eb; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .analysis { background: #f9fafb; padding: 20px; border-left: 4px solid #2563eb; border-radius: 4px; white-space: pre-wrap; }
        .meta { text-align: center; color: #9ca3af; font-size: 12px; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; }
      </style>
    </head>
    <body>
      <h1>ðŸ“Š Image Analysis Report</h1>
      ${imageUrl ? `
        <div class="image-container">
          <img src="${imageUrl}" alt="Analyzed Image" />
        </div>
      ` : ''}
      <h2>Analysis Results:</h2>
      <div class="analysis">${analysis}</div>
      <div class="meta">
        Report generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}<br>
        Powered by AI Study Buddy with Groq AI Vision
      </div>
    </body>
    </html>
  `;

  const blob = new Blob([html], { type: 'text/html;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `image-analysis-${Date.now()}.html`;
  link.click();
  URL.revokeObjectURL(link.href);
}
